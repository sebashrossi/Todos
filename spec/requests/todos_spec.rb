require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/todos', type: :request do

  # This should return the minimal set of attributes required to create a valid
  # Todo. As you add validations to Todo, be sure to
  # adjust the attributes here as well.
  let(:user) { create(:user) }
  let(:valid_attributes) {
    {
      name:    'Todo test',
      status:  'to_do',
      user_id: user.id
    }
  }

  let(:invalid_attributes) {
    {
      name: '',
      status: '',
      user_id: user.id
    }
  }

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_user_todo_url(user_id: user.id)
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    it 'renders a successful response' do
      todo = Todo.create! valid_attributes
      get edit_user_todo_url(user_id: user.id, id: todo.id)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Todo' do
        expect {
          post user_todos_url(user_id: user.id), params: { todo: valid_attributes }
        }.to change(Todo, :count).by(1)
      end

      it 'redirects to the created todo' do
        post user_todos_url(user_id: user.id), params: { todo: valid_attributes }
        expect(response).to redirect_to(user_path(user))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Todo' do
        expect {
          post user_todos_url(user_id: user.id), params: { todo: invalid_attributes }
        }.to change(Todo, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post user_todos_url(user_id: user.id), params: { todo: invalid_attributes }
        expect(response.status).to eq(422)
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) {
        {
          status: 'doing'
        }
      }

      it 'updates the requested todo' do
        todo = Todo.create! valid_attributes
        patch user_todo_url(user_id: user.id, id: todo.id), params: { todo: new_attributes }
        expect(todo.reload.status).to eq 'doing'
      end

      it 'redirects to the todo' do
        todo = Todo.create! valid_attributes
        patch user_todo_url(user_id: user.id, id: todo.id), params: { todo: new_attributes }
        todo.reload
        expect(response).to redirect_to(user_path(user))
      end
    end

    context 'with invalid parameters' do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        todo = Todo.create! valid_attributes
        patch user_todo_url(user_id: user.id, id: todo.id), params: { todo: invalid_attributes }
        expect(response.status).to eq(422)
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested todo' do
      todo = Todo.create! valid_attributes
      expect {
        delete user_todo_url(user_id: user.id, id: todo.id)
      }.to change(Todo, :count).by(-1)
    end

    it 'redirects to the todos list' do
      todo = Todo.create! valid_attributes
      delete user_todo_url(user_id: user.id, id: todo.id)
      expect(response).to redirect_to(user_path(user))
    end
  end
end
